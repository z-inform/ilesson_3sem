Семафоры. (сделаны для решения задачи крит секции)
Секция - участок кода с единственным входом и единственным выходом.
Крит секция - секция кода, работающая с общими данными (из разных процессов). Без семафоров и других синхронизаций возникает ситуация гонки.

Двоичный/бинарный семафор - семафор дающий исключительный (монопольный) доступ к общим ресурсам (имеет состояние 1/0). Операции над семафором P/V. В целом двоичный семафор это mutex, но есть какие-то отличия (у мьютекса есть владелец)
В случае попытки входа (P) при закрытом семафоре процесс блокируется

counted семафоры - могут принимать любое неотрицательное значение. Определены операции + и -
При невозможности выполнить вычитание процесс блокируется

Защита крит секции с помощью семафоров:
{
    semaphore s = 0;
    counted c = 42;

    c += 5; //V(c)
    c -= 1; //P(c)

    //защита для бинарного семафора
    enter(s); //вход в секцию P(s) 1->0
    //тело секции
    leave(s); //выход из секции V(s) 0->1

    //защита для counted семафора
    c -= 5; //вход в секцию
    //тело секции
    c += 5; //выход из секции (возвращаем столько же, сколько взяли)
}

//выдается массив семафоров s[n]
key = semget(id, n, 0660 | IPC_CREATE | IPC_EXCL); //получение семафоров

semop(id, cmd, count); //выполнение операций над семафором

//операции над семафором
struct sembuf op[6] = {{}, {}, {}, ...}
struct sembuf{ //а вообще эта структура описана в man semop.2
    unsigned short sem_num //номер семафора
    short sem_op //сама операция (+, -, 0)
    short sem_flg //SEM_UNDO, IPC_NOWAIT
}
Если хоть одна из операций над семафорами блокируется, не выполняется ни одной из операций из массива. Весь блок операций - транзакция (выполнятся или все, или ничего)

semctl(id, IPC_RMID, 0); //удаление семафоров

/*-------------------------------task------------------------------------*/ Это пример который вроде делать не нужно
Реализация "лифта" для процессов

{
    sem door = 2; //Не более 2 проходят через дверь
    sem lift = 10; //Не более 10 в лифте
    sem call = 1; //Не более 1 нажимает на кнопку
    sem c = 1;


    //это плохое решение и вообще не работает. Придется использовать несколько двоичных семафоров и вообще возможно все равно останется race condition
    //enter
    p(c);
    door--;
    lift--;
    call--;
    v(c)
    //leave

    //use lift
    p(c)
    call++;
    lift++;
    door++;
    v(c);
    //leave

    //а это красивое решение (спасибо System V)
    transaction_enter{ //все ограничения на пользование лифтом. Операция входа в лифт
        door--;
        lift--;
        call--;
    }

    transaction_after_enter{ //после входа освободили дверь и кнопку, но все еще занимаем место в лифте
        door++;
        call++;
    }

    transaction_leave{ //выход из лифта
        lift++;
    }

}

/*-------------------------------task--------------------------------------*/
Катание на яхте
Есть пассажиры (NP штук и на берегу) и капитан (одна штука)

NB - грузоподъемность яхты
NT = 1 - проспускная способность трапа

Катаемся до какого-нибудь условия (время/количество рейсов/...)

Каждый пассажир обязательно сходит на берег после катания и нельзя сойти не покатавшись

Пассажиров может быть меньше чем всего влезает в яхту

Капитан печатает что происходит с яхтой (это отдельный процесс)

